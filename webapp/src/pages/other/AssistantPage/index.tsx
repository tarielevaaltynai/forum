import React, { useState, useEffect, FormEvent } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { trpc } from '../../../lib/trpc';
import { useMe } from '../../../lib/ctx';
import { Segment } from '../../../components/Segment';
import { Button } from '../../../components/Button';
import styles from './index.module.scss';
import { format } from 'date-fns';

export const AssistantPage: React.FC = () => {
  const me = useMe();
  const navigate = useNavigate();
  const { username } = useParams<{ username: string }>();
  const [sidebarVisible, setSidebarVisible] = useState(true);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–æ—É—Ç–∞–º
  useEffect(() => {
    if (me) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å /assistant –Ω–∞ /:nick/assistant
      if (!username || username !== me.nick) {
        navigate(`/${me.nick}/assistant`, { replace: true });
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å /:username/assistant –Ω–∞ /assistant
      if (username) {
        navigate('/assistant', { replace: true });
      }
    }
  }, [me, username, navigate]);

  // –°–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth <= 768) {
        setSidebarVisible(false);
      } else {
        setSidebarVisible(true);
      }
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    handleResize();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const [query, setQuery] = useState('');
  const [localMessages, setLocalMessages] = useState<
    { sender: string; content: string; id: string; timestamp: Date }[]
  >([]);
  const [selectedSessionId, setSelectedSessionId] = useState<string | null>(null);

  // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
  const { data: sessions, refetch: refetchSessions } = trpc.getSessions.useQuery(undefined, {
    enabled: !!me,
  });

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é
  useEffect(() => {
    if (me && sessions && sessions.length > 0 && !selectedSessionId) {
      setSelectedSessionId(sessions[0].id);
    }
  }, [sessions, me, selectedSessionId]);

  // –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
  const { data: messagesData, refetch: refetchMessages } = trpc.getSessionMessages.useQuery(
    { sessionId: selectedSessionId },
    { enabled: !!selectedSessionId },
  );

  // –ú—É—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏ (AI)
  const askMutation = trpc.askQuestion.useMutation({
    onSuccess: () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      if (me && selectedSessionId) {
        refetchMessages();
      }
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  const createSessionMutation = trpc.createSession.useMutation({
    onSuccess: (data) => {
      refetchSessions();
      if (data.id) {
        setSelectedSessionId(data.id);
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        if (window.innerWidth <= 768) {
          setSidebarVisible(false);
        }
      }
    },
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const deleteSessionMutation = trpc.deleteSession.useMutation({
    onSuccess: (_data, variables) => {
      refetchSessions();
      if (selectedSessionId === variables.sessionId) {
        setSelectedSessionId(null);
      }
    },
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
  const deleteAllMutation = trpc.deleteAllSessions.useMutation({
    onSuccess: () => {
      refetchSessions();
      setSelectedSessionId(null);
    },
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–≤–æ–ø—Ä–æ—Å–∞)
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!query.trim()) return;

    if (me) {
      // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –ë–î
      if (selectedSessionId) {
        askMutation.mutate({ question: query, sessionId: selectedSessionId });
        setQuery('');
      } else if (sessions && sessions.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        createSessionMutation.mutate();
        // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ,
        // —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º—É—Ç–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–µ—Å—Å–∏–∏
      } else {
        console.warn("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.");
      }
    } else {
      // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      const userMsg = {
        sender: 'user',
        content: query,
        id: Date.now().toString(),
        timestamp: new Date(),
      };
      
      const assistantMsg = {
        sender: 'assistant',
        content: '–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.',
        id: Date.now().toString() + '_assistant',
        timestamp: new Date(Date.now() + 1000), // –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ
      };
      
      setLocalMessages(prev => [...prev, userMsg, assistantMsg]);
      setQuery('');
    }
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  const messages = [
    ...(messagesData || []).map(m => ({
      id: m.id,
      sender: m.sender,
      content: m.content,
      timestamp: new Date(m.timestamp),
    })),
    ...localMessages,
  ].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

  // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    const messagesContainer = document.querySelector(`.${styles.messages}`);
    if (messagesContainer) {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }, [messages]);

  const handleSessionSelect = (sessionId: string) => {
    setSelectedSessionId(sessionId);
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏
    if (window.innerWidth <= 768) {
      setSidebarVisible(false);
    }
  };

  const toggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <button 
          className={styles.toggleSidebar} 
          onClick={toggleSidebar}
          aria-label="Toggle sidebar"
        >
          ‚ò∞
        </button>
        <h1 className={styles.title}>
          {username ? `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${username}` : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}
        </h1>
        {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ö–µ–¥–µ—Ä */}
      </header>

      <aside className={`${styles.sidebar} ${sidebarVisible ? styles.visible : ''}`}>
        {me && (
          <div className={styles.actions}>
            <Button onClick={() => createSessionMutation.mutate()}>–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è</Button>
            {sessions && sessions.length > 0 && (
              <Button 
                onClick={() => {
                  if (selectedSessionId) {
                    deleteSessionMutation.mutate({ sessionId: selectedSessionId });
                  } else if (sessions.length > 0) {
                    deleteAllMutation.mutate();
                  }
                }}
              >
                {selectedSessionId ? '–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é' : '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ'}
              </Button>
            )}
          </div>
        )}
        <div className={styles.sessions}>
          {sessions && sessions.length > 0 ? (
            sessions.map(session => (
              <button
                key={session.id}
                onClick={() => handleSessionSelect(session.id)}
                className={`${styles.sessionButton} ${selectedSessionId === session.id ? styles.active : ''}`}
              >
                {format(new Date(session.createdAt), 'dd.MM.yyyy HH:mm')}
              </button>
            ))
          ) : me ? (
            <div className={styles.emptyState}>
              <div className={styles.icon}>üí¨</div>
              <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</h3>
              <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</p>
            </div>
          ) : null}
        </div>
      </aside>

      <main className={styles.content}>
        <div className={styles.messages}>
          {messages.length > 0 ? (
            messages.map(msg => (
              <div 
                key={msg.id} 
                className={`${styles.message} ${msg.sender === 'assistant' ? styles.assistant : styles.user}`}
              >
                <div className={styles.messageHeader}>
                  <span className={styles.sender}>
                    {msg.sender === 'assistant' ? '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç' : me && msg.sender === 'user' ? '–í—ã' : msg.sender}
                  </span>
                  <span className={styles.timestamp}>
                    {format(msg.timestamp, 'dd.MM.yyyy HH:mm')}
                  </span>
                </div>
                <div className={styles.messageContent}>
                  {msg.content}
                </div>
              </div>
            ))
          ) : selectedSessionId || !me ? (
            <div className={styles.emptyState}>
              <div className={styles.icon}>ü§ñ</div>
              <h3>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
              <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</p>
            </div>
          ) : (
            <div className={styles.emptyState}>
              <div className={styles.icon}>üëã</div>
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é</h3>
              <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
            </div>
          )}
        </div>
      </main>

      <form className={styles.form} onSubmit={handleSubmit}>
        <input
          className={styles.input}
          type="text"
          value={query}
          onChange={(e) => setQuery(e.currentTarget.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
          disabled={askMutation.isLoading || (me && !selectedSessionId && (!sessions || sessions.length === 0))}
        />
        <Button 
          type="submit" 
          disabled={askMutation.isLoading || !query.trim() || (me && !selectedSessionId && (!sessions || sessions.length === 0))}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </Button>
      </form>
    </div>
  );
};