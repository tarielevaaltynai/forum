import {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react";
import css from "./index.module.scss";

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã
interface ThemeContextType {
  isDark: boolean;
  toggleTheme: () => void;
}

export const ThemeContext = createContext<ThemeContextType>({
  isDark: false,
  toggleTheme: () => {},
});

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã
export const useTheme = () => useContext(ThemeContext);

interface ThemeProviderProps {
  children: ReactNode;
}

export const ThemeProvider = ({ children }: ThemeProviderProps) => {
  const [isDark, setIsDark] = useState<boolean>(() => {
    if (typeof window !== "undefined") {
      const savedTheme = localStorage.getItem("theme");
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      return savedTheme ? savedTheme === "dark" : prefersDark;
    }
    return false;
  });

  const toggleTheme = () => {
    setIsDark((prev) => !prev);
  };

  useEffect(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å .dark –Ω–∞ <html> –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã
    document.documentElement.classList.toggle("dark", isDark);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }, [isDark]);

  return (
    <ThemeContext.Provider value={{ isDark, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
export const ThemeToggle = () => {
  const { isDark, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className={css.themeToggle}
      aria-label={
        isDark ? "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É" : "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç—ë–º–Ω—É—é —Ç–µ–º—É"
      }
    >
      <div className={css.toggleContainer}>
        {isDark ? (
          <span className={css.icon}>üåô</span>
        ) : (
          <span className={css.icon}>‚òÄÔ∏è</span>
        )}
      </div>
    </button>
  );
};
