generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Idea {
  id           String      @id @default(uuid())
  nick         String      @unique
  name         String
  serialNumber Int         @unique @default(autoincrement())
  description  String
  images       String[]
  text         String
  createdAt    DateTime    @default(now())
  authorId     String
  author       User        @relation(fields: [authorId], references: [id])
  ideasLikes   IdeaLike[]
  blockedAt    DateTime?
  comments     Comment[]

  @@index([authorId])
}

model User {
  id           String          @id @default(uuid())
  nick         String          @unique
  name         String
  surname      String
  avatar       String?
  gender       String
  birthDate    DateTime
  email        String          @unique
  password     String
  createdAt    DateTime        @default(now())
  role         UserRole        @default(USER)
  blocked      Boolean         @default(false)
  blockedAt    DateTime?

  ideas        Idea[]
  ideasLikes   IdeaLike[]
  permissions  UserPermission[]
  comments     Comment[]
  specialist   Specialist?

  // Чат
  chatMessages ChatMessage[]
  chatSessions ChatSession[]

  @@index([role])
}

model ChatMessage {
  id        String      @id @default(uuid())
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id])
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  role      String      // "user" или "assistant"
  content   String
  createdAt DateTime    @default(now())
}


model ChatSession {
  id        String       @id @default(uuid())
  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime     @default(now())
}



model Specialist {
  id         String   @id @default(uuid())
  userId     String   @unique
  specialty  String
  isVerified Boolean  @default(false)
  document   String?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IdeaLike {
  id        String   @id @default(uuid())
  ideaId    String
  userId    String
  createdAt DateTime @default(now())

  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([ideaId, userId])
  @@index([userId])
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isEdited   Boolean   @default(false)
  isBlocked  Boolean   @default(false)
  blockedAt  DateTime?

  authorId   String
  ideaId     String
  parentId   String?

  author     User      @relation(fields: [authorId], references: [id])
  idea       Idea      @relation(fields: [ideaId], references: [id])
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@index([authorId])
  @@index([ideaId])
  @@index([parentId])
  @@index([isBlocked])
}

enum UserPermission {
  BLOCK_IDEAS
  BLOCK_USERS
  ALL
}

enum UserRole {
  USER
  EXPERT
  ADMIN
}
