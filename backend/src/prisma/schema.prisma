generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Idea {
  id           String    @id @default(uuid())
  nick         String    @unique
  name         String
  serialNumber Int       @unique @default(autoincrement())
  description  String
  images       String[]
  text         String
  createdAt    DateTime  @default(now())
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  ideasLikes   IdeaLike[]
  blockedAt    DateTime?
  comments     Comment[]

  @@index([authorId])
}

model User {
  id          String      @id @default(uuid())
  nick        String      @unique
  name        String
  avatar      String?
  surname     String
  gender      String
  birthDate   DateTime
  password    String
  createdAt   DateTime    @default(now())
  ideas       Idea[]
  email       String      @unique
  ideasLikes  IdeaLike[]
  permissions UserPermission[]
  comments    Comment[]
  role        UserRole    @default(USER)

  
  // Relation to Specialist (if user is a specialist)
  specialist  Specialist?


  blocked     Boolean     @default(false)  // Новое поле для блокировки
  blockedAt  DateTime?

  @@index([role])
}

model Specialist {
  id        String   @id @default(uuid())
  userId    String   @unique // Foreign key to User
  specialty String   // Specialty of the specialist
  isVerified Boolean @default(false) 
  document String?

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
model IdeaLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([ideaId, userId])
  @@index([userId])
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEdited    Boolean   @default(false)
  isBlocked   Boolean   @default(false)
  blockedAt   DateTime?

  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  idea        Idea      @relation(fields: [ideaId], references: [id])
  ideaId      String
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[] @relation("CommentReplies")

  @@index([authorId])
  @@index([ideaId])
  @@index([parentId])
  @@index([isBlocked])
}



enum UserPermission {
  BLOCK_IDEAS
  BLOCK_USERS
  ALL
}

// Enum for user roles
enum UserRole {
  USER
  EXPERT
  ADMIN
}
